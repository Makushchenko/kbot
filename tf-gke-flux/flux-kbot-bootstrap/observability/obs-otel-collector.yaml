apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-gateway
  namespace: observability
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:0.135.0
  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}

    processors:
      memory_limiter:
        check_interval: 2s
        limit_percentage: 80
        spike_limit_percentage: 25
      batch:
        timeout: 5s
        send_batch_size: 8192

      transform/extract_nested_json:
        log_statements:
          - context: log
            statements:
              # Extract JSON from message using proper OTTL syntax
              - set(attributes["parsed_json"], ParseJSON(attributes["message"])) where IsString(attributes["message"]) and attributes["message"] != ""
              # Extract fields from parsed JSON
              - set(attributes["severity"], attributes["parsed_json"]["severity"]) where IsDefined(attributes["parsed_json"]["severity"])
              - set(attributes["payload"], attributes["parsed_json"]["Payload"]) where IsDefined(attributes["parsed_json"]["Payload"])
              - set(attributes["trace_id"], attributes["parsed_json"]["trace_id"]) where IsDefined(attributes["parsed_json"]["trace_id"])
              - set(attributes["cmd"], attributes["parsed_json"]["message"]) where IsDefined(attributes["parsed_json"]["message"])

      # Promote Fluent Bit fields -> OTel resource attributes (no K8s API needed)
      transform/flb_to_semconv:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              # Pods (from Fluent Bit kubernetes filter)
              - set(resource.attributes["k8s.namespace.name"], attributes["kubernetes"]["namespace_name"]) where attributes["kubernetes"]["namespace_name"] != nil
              - set(resource.attributes["k8s.pod.name"],      attributes["kubernetes"]["pod_name"])       where attributes["kubernetes"]["pod_name"] != nil
              - set(resource.attributes["k8s.container.name"], attributes["kubernetes"]["container_name"]) where attributes["kubernetes"]["container_name"] != nil
              - set(resource.attributes["service.name"], attributes["kubernetes"]["container_name"])       where attributes["kubernetes"]["container_name"] != nil
              # Nodes (journald)
              - set(resource.attributes["k8s.node.name"], attributes["_HOSTNAME"])  where attributes["_HOSTNAME"] != nil
              - set(resource.attributes["service.name"],  attributes["_SYSTEMD_UNIT"]) where attributes["_SYSTEMD_UNIT"] != nil
              # Optional tidy-up
              - delete_key(attributes, "kubernetes")

    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
      otlphttp/logs:
        endpoint: "http://loki.observability.svc.cluster.local:3100/otlp"
        tls:
          insecure: true
      otlphttp/traces:
        endpoint: "http://tempo.observability.svc.cluster.local:4318"

    service:
      telemetry:
        metrics:
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: "0.0.0.0"
                    port: 8888
      pipelines:
        logs:
          receivers: [otlp]
          processors: [memory_limiter, transform/flb_to_semconv, transform/extract_nested_json, batch]
          exporters: [otlphttp/logs]
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/traces]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [prometheus]
